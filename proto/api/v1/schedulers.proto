syntax = "proto3";

package api.v1;

option java_package = "com.topfreegames.maestro.pkg.api.v1";
option go_package = "github.com/topfreegames/maestro/pkg/api/v1";

import "google/api/annotations.proto";
import "api/v1/messages.proto";
import "google/protobuf/descriptor.proto";

extend google.protobuf.FieldOptions {
  optional string validator = 51234;
}

// Service that manages the configuration and perform actions into schedulers.
service SchedulersService {
  // Lists all schedulers.
  rpc ListSchedulers(ListSchedulersRequest) returns (ListSchedulersResponse) {
    option (google.api.http) = {
      get: "/schedulers"
    };
  }

  // Get Specific Scheduler by name
  rpc GetScheduler(GetSchedulerRequest) returns (GetSchedulerResponse) {
    option (google.api.http) = {
      get: "/schedulers/{scheduler_name=*}"
    };
  }

  // Create a scheduler.
  rpc CreateScheduler(CreateSchedulerRequest) returns (CreateSchedulerResponse) {
    option (google.api.http) = {
      post: "/schedulers",
      body: "*"
    };
  }

  // Creates new scheduler version and switch it to active version.
  rpc NewSchedulerVersion(NewSchedulerVersionRequest) returns (NewSchedulerVersionResponse) {
    option (google.api.http) = {
      post: "/schedulers/{name=*}",
      body: "*"
    };
  }

  // Patch a scheduler and switch it to active version.
  rpc PatchScheduler(PatchSchedulerRequest) returns (PatchSchedulerResponse) {
    option (google.api.http) = {
      patch: "/schedulers/{name=*}",
      body: "*"
    };
  }

  // Given a Scheduler, returns it's versions
  rpc GetSchedulerVersions(GetSchedulerVersionsRequest) returns (GetSchedulerVersionsResponse) {
    option (google.api.http) = {
      get: "/schedulers/{scheduler_name=*}/versions"
    };
  }

  // Switch Active Version to Scheduler
  rpc SwitchActiveVersion(SwitchActiveVersionRequest) returns (SwitchActiveVersionResponse) {
    option (google.api.http) = {
      put: "/schedulers/{scheduler_name=*}",
      body: "*"
    };
  }

  // List Scheduler and Game Rooms info by Game
  rpc GetSchedulersInfo(GetSchedulersInfoRequest) returns (GetSchedulersInfoResponse) {
    option (google.api.http) = {
      get: "/schedulers/info"
    };
  }

  // List Scheduler and Game Rooms info by Game
  rpc DeleteScheduler(DeleteSchedulerRequest) returns (DeleteSchedulerResponse) {
    option (google.api.http) = {
      delete: "/schedulers/{scheduler_name=*}"
    };
  }
}

// List scheduler request options.
message ListSchedulersRequest {
  // Unique identifier for the scheduler.
  string name = 1;
  // Game the new scheduler will be part of.
  string game = 2;
  // Version to for the scheduler.
  string version = 3;
}

// The list schedulers response message.
message ListSchedulersResponse {
  // List of schedulers fetched.
  repeated SchedulerWithoutSpec schedulers = 1;
}

// Response for the create scheduler.
message CreateSchedulerResponse {
  // Scheduler that was created.
  Scheduler scheduler = 1;
}

// Scheduler is the struct that defines a maestro scheduler.
message CreateSchedulerRequest {
  // Unique identifier for the scheduler.
  string name = 1;
  // Game the new scheduler will be part of.
  string game = 2;
  // The spec object defines all the game room container configurations and spec of the scheduler.
  Spec spec = 3;
  // The port range object describes what is the port range used to allocate game rooms.
  PortRange port_range = 4;
  // The max surge of new rooms, used to scale and update
  string max_surge = 5;
  // The rooms replicas defines the desired number of Game Rooms in a scheduler.
  int32 rooms_replicas = 6;
  // The autoscaling defines the autoscaling and its policy to be followed
  optional Autoscaling autoscaling = 7;
  // List of Scheduler forwarders
  repeated Forwarder forwarders = 8;
  // Add annotations for scheduler
  map<string, string> annotations = 9;
}

// Get Scheduler operation request
message GetSchedulerRequest {
  // Scheduler name where the rooms will be added.
  string scheduler_name = 1 [(api.v1.validator) = "^(?!info$).*"];
  // Scheduler version to be queried (query param)
  string version = 2;
}

// The list schedulers response message.
message GetSchedulerResponse {
  // List of schedulers fetched.
  Scheduler scheduler = 1;
}

// Scheduler is the struct that defines a maestro scheduler.
message NewSchedulerVersionRequest {
  // Unique identifier for the scheduler.
  string name = 1;
  // Game the new scheduler will be part of.
  string game = 2;
  // The spec object defines all the game room container configurations and spec.
  Spec spec = 3;
  // The port range object describes what is the port range used to allocate game rooms.
  PortRange port_range = 4;
  // The max surge of new rooms, used to scale and update
  string max_surge = 5;
  // The rooms replicas is the desired number of rooms that maestro should keep available.
  int32 rooms_replicas = 6;
  // The autoscaling defines the autoscaling and its policy to be followed
  optional Autoscaling autoscaling = 7;
  // List of Scheduler forwarders
  repeated Forwarder forwarders = 8;
  // New annotations for scheduler
  map<string, string> annotations = 9;
}

// Update schedule operation response payload.
message NewSchedulerVersionResponse {
  // Operation ID, further this id can be used to consult its state.
  string operation_id = 1;
}

// PatchSchedulerRequest is the struct that defines a partial update of a maestro scheduler.
message PatchSchedulerRequest {
  // Unique identifier for the scheduler.
  string name = 1;
  // The spec object defines all the game room container configurations and spec.
  optional OptionalSpec spec = 2;
  // The port range object describes what is the port range used to allocate game rooms.
  optional PortRange port_range = 3;
  // The max surge of new rooms, used to scale and update
  optional string max_surge = 4;
  // Rooms Replicas is the desired number of rooms
  optional int32 rooms_replicas = 5;
  // Autoscaling rules to the scheduler
  optional OptionalAutoscaling autoscaling = 6;
  // List of Scheduler forwarders
  repeated Forwarder forwarders = 7;
  // Annotations declaration for the scheduler
  map<string, string> annotations = 8;
}

// PatchSchedulerResponse have the operation response id that represents the operation creted to this change.
message PatchSchedulerResponse {
  // Operation ID, further this id can be used to consult its state.
  string operation_id = 1;
}

// Get Scheduler Versions request
message GetSchedulerVersionsRequest {
  // Scheduler name whose versions the client wants to fetch
  string scheduler_name = 1;
}

// Get Scheduler Versions payload
message GetSchedulerVersionsResponse {
  // List of versions for an scheduler
  repeated SchedulerVersion versions = 1;
}

// Switch Active Version Request
message SwitchActiveVersionRequest {
  // Scheduler Name
  string scheduler_name = 1;
  // Version that will be activate in Scheduler
  string version = 2;
}

// Switch Active Version Response
message SwitchActiveVersionResponse {
  // Operation Id generated
  string operation_id = 1;
}

// List Scheduler and Game Rooms Info Request
message GetSchedulersInfoRequest {
  // Game name to filter schedulers
  string game = 1;  // Mapped to URL query parameter `game`.
}

// List Scheduler and Game Rooms Info Response
message GetSchedulersInfoResponse {
  // List of schedulers fetched.
  repeated SchedulerInfo schedulers = 1;
}

// Delete scheduler request
message DeleteSchedulerRequest {
  // Scheduler name to be deleted
  // NOTE: On http protocol, this operates as a path param.
  string scheduler_name = 1;
}

// Delete scheduler payload
message DeleteSchedulerResponse {
  // Delete scheduler operation ID.
  string operation_id = 1;
}
