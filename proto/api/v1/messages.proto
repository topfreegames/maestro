syntax = "proto3";

package api.v1;

option java_package = "com.topfreegames.maestro.pkg.api.v1";
option go_package = "github.com/topfreegames/maestro/pkg/api/v1";



import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/duration.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Maestro";
  };
  schemes: HTTP;
  schemes: HTTPS;
  consumes: "application/json";
  produces: "application/json";
};

// Container is the struct that defines a game room container configuration.
message Container {

  // Name of the container.
  string name = 1;
  // Image address .
  string image = 2;
  // Image pull policy: Always, Never and IfNotExists.
  string image_pull_policy = 3;
  // Container command to be called when container is instantiated.
  repeated string command = 4;
  // Container environment variables.
  repeated ContainerEnvironment environment = 5;
  // Container resources request (cpu/memory).
  ContainerResources requests = 6;
  // Container resources limits (cpu/memory).
  ContainerResources limits = 7;
  // Container exposed ports definitions.
  repeated ContainerPort ports = 8;

}
// Annotation should add a annotation to scheduler
message Annotation{
  // name of the annotation
  string name = 1;
  // required annotation value or option
  string value = 2;
}

// OptionalContainer is the struct that defines a game room container configuration.
// This message is used to patch container configuration.
message OptionalContainer {
  // Name of the container.
  optional string name = 1;
  // Image address.
  optional string image = 2;
  // Image pull policy: Always, Never and IfNotExists.
  optional string image_pull_policy = 3;
  // Container command to be called when container is instantiated.
  repeated string command = 4;
  // Container environment variables.
  repeated ContainerEnvironment environment = 5;
  // Container resources request (cpu/memory).
  optional ContainerResources requests = 6;
  // Container resources limits (cpu/memory).
  optional ContainerResources limits = 7;
  // Container exposed ports definitions.
  repeated ContainerPort ports = 8;
}

// Container environment variables.
message ContainerEnvironment {
  // Container environment variable name.
  string name = 1;
  // Container environment variable value.
  optional string value = 2;
  // Source for the environment variable's value. Cannot be used if value is not empty.
  optional ContainerEnvironmentValueFrom value_from = 3;
}
// Container environment ValueFrom possible values
message ContainerEnvironmentValueFrom {
  // Container environment variable name using field reference, supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
  // spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
  optional ContainerEnvironmentValueFromFieldRef field_ref = 1;
  // Container environment variable value using a secret key reference contained in the namespace.
  optional ContainerEnvironmentValueFromSecretKeyRef secret_key_ref = 2;
}

//  Container environment valueFrom using field reference.
message ContainerEnvironmentValueFromFieldRef {
  // The field path of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`,
  // spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
  string field_path = 1;
}

// Container environment valueFrom using secret key reference.
message ContainerEnvironmentValueFromSecretKeyRef {
  // Name of the secret contained in the scheduler namespace.
  string name = 1;
  // Secret key.
  string key = 2;
}
// Container resources (cpu/memory) (request and limits).
message ContainerResources {
  // Container memory amount.
  string memory = 1;
  // Container cpu amount.
  string cpu = 2;
}

// Container exposed port definition.
message ContainerPort {
  // Name of the exposed port.
  string name = 1;
  // Protocol used to expose the port (TCP, UDP, SCTP).
  string protocol = 2;
  // Port number used.
  int32 port = 3;
  // Optional container host port.
  int32 host_port = 4;
}

// Port range is the range definition that the rooms will use. If a scheduler
// defines its range as 0-1000 (start-end), it is guarantee that all rooms be
// within this range.
message PortRange {
  // Range start, it is inclusive.
  int32 start = 1;
  // Range end, it is exclusive.
	int32 end = 2;
}

// Spec is the specifications of the scheduler, with relevant info about what is being used.
message Spec {
  // GameRoom.spec version
  string version = 1;
  // The game room termination grace period.
  google.protobuf.Duration termination_grace_period = 2;
  // The container object array defines all the game room container configurations.
  repeated Container containers = 3;
  // Runtime game room toleration configuration.
  string toleration = 4;
  // Runtime game room affinity configuration.
  string affinity = 5;
}

// OptionalSpec is the specifications of the scheduler, with relevant info about what is being used.
// This message is used to patch spec configuration.
message OptionalSpec {
  // The game room termination grace period.
  optional google.protobuf.Duration termination_grace_period = 2;
  // The container object array defines all the game room container configurations.
  repeated OptionalContainer containers = 3;
  // Runtime game room toleration configuration.
  optional string toleration = 4;
  // Runtime game room affinity configuration.
  optional string affinity = 5;
}

// Scheduler definition.
message Scheduler {
  // Name is an unique identifier for the scheduler.
  string name = 1;
  // Game is the "scope" where the scheduler will be placed. It is required, and
  // games name are unique.
  string game = 2;
  // Current state of the scheduler.
  string state = 3;
  // Port range for the scheduler rooms.
  PortRange port_range = 4;
  // Time the scheduler was created.
  google.protobuf.Timestamp created_at = 5;
  // Max surge of rooms 
  string max_surge = 6;
  // Rooms Replicas is the desired number of rooms 
  int32 rooms_replicas = 7;
  // GameRoom spec
  Spec spec = 8;
  // Autoscaling rules to the scheduler
  optional Autoscaling autoscaling = 9;
  // List of Scheduler forwarders
  repeated Forwarder forwarders = 10;
  // List with annotations
  map<string, string> annotations = 11;
}

// Scheduler message used in the "ListScheduler version" definition. The "spec" is not implemented
// on this message since it's unnecessary for the list function
message SchedulerWithoutSpec {
  // Name is an unique identifier for the scheduler.
  string name = 1;
  // Game is the "scope" where the scheduler will be placed. It is required, and
  // games name are unique.
  string game = 2;
  // Current state of the scheduler.
  string state = 3;
  // Scheduler current version.
  string version = 4;
  // Port range for the scheduler rooms.
  PortRange port_range = 5;
  // Time the scheduler was created.
  google.protobuf.Timestamp created_at = 6;
  // Max surge of rooms
  string max_surge = 7;
  // Rooms Replicas is the desired number that a Scheduler maintains.
  int32 rooms_replicas = 8;
}

// The List Operation Item object representation.
message ListOperationItem {
  // Unique identifier for the operation.
  string id = 1;
  // Current status of the operation.
  // TODO(gabrielcorado): change to enum.
  string status = 2;
  // Name of the operation being executed.
  string definition_name = 3;
  // Operation lease. This is an optional field since not all operations have a lease.
  optional Lease lease = 4;
  // Scheduler identifier that the operation is from.
  string scheduler_name = 5;
  // Time the operation was created.
  google.protobuf.Timestamp created_at = 6;
}

// The operation object representation
message Operation {
  // Unique identifier for the operation.
  string id = 1;
  // Current status of the operation.
  // TODO(gabrielcorado): change to enum.
  string status = 2;
  // Name of the operation being executed.
  string definition_name = 3;
  // Operation lease. This is an optional field since not all operations have a lease.
  optional Lease lease = 4;
  // Scheduler identifier that the operation is from.
  string scheduler_name = 5;
  // Time the operation was created.
  google.protobuf.Timestamp created_at = 6;
  // Input the data that was sent by client.
  google.protobuf.Struct input = 7;
  // ExecutionHistory is the execution details filled by Maestro.
  repeated OperationEvent execution_history = 8;
}

// Autoscaling struct representation
message OptionalAutoscaling {
  // Enable flag to autoscaling feature
  optional bool enabled = 1;
  // Min is the minimum number of game rooms that a scheduler should have
  optional int32 min = 2;
  // Max is the maximum number of game rooms that a scheduler should have
  optional int32 max = 3;
  // Policy is the autoscaling policy that scheduler should follow
  optional AutoscalingPolicy policy = 4;
}

// Autoscaling struct representation
message Autoscaling {
  // Enable flag to autoscaling feature
  bool enabled = 1;
  // Min is the minimum number of game rooms that a scheduler should have
  int32 min = 2;
  // Max is the maximum number of game rooms that a scheduler should have
  int32 max = 3;
  // Policy is the autoscaling policy that scheduler should follow
  AutoscalingPolicy policy = 4;
}

// AutoscalingPolicy object representation
message AutoscalingPolicy {
  // Type is the policy type to the scheduler
  string type = 1;  
  // Parameters is the autoscaling arguments to guide the policy execution
  PolicyParameters parameters = 2;
}

// PolicyParameters object representation
message PolicyParameters {
  // RoomOccupancy is the policy parameters to execute rooms occupancy policy
  optional RoomOccupancy room_occupancy = 1;
}

// RoomOccupancy optional policy parameter
message RoomOccupancy {
  // ReadyTarget represents the number of rooms ready rate that the scheduler should keep
  float ready_target = 1;
}

// The operation lease object representation
message Lease {
  // Lease time to live in RFC3999 format UTC. if the current time is greater than this value,
  // the lease is probably expired.
  string ttl = 1;
}

// OperationEvent object represent an execution event.
message OperationEvent {
  // DateTime is the time when the event occurred.
  google.protobuf.Timestamp created_at = 1;
  // Event describe what happened in this event.
  string  event = 2;
}

// Represents the version of a Scheduler
message SchedulerVersion {
  // Specific version
  string version = 1;
  // Flag indicating if the version is active or not
  bool is_active = 2;
  // Specifies when the version has been created
  google.protobuf.Timestamp created_at = 3;
}

// Forwarder definitions.
message Forwarder {
  // Forwarder name used to identify it. Must be unique within the scheduler
  string name = 1;
  // Defines if the forwarder is going to receive events or not
  bool enable = 2;
  // Forwarder type
  string type = 3;
  // Forwarder gRPC service address.
  string address = 4;
  // Forwarder Options
  optional ForwarderOptions options = 5;
}

// Forwarder Options definitions.
message ForwarderOptions {
  // Timeout of a request in milliseconds.
  int64 timeout = 1;
  // Additional information
  google.protobuf.Struct metadata = 2;
}

// Autoscaling Info for schedulerInfo message
message AutoscalingInfo {
  // Enable flag to autoscaling feature
  bool enabled = 1;
  // Min is the minimum number of game rooms that a scheduler should have
  int32 min = 2;
  // Max is the maximum number of game rooms that a scheduler should have
  int32 max = 3;
}

// Scheduler Info
message SchedulerInfo {
  // Scheduler name.
  string name = 1;
  // Scheduler game.
  string game = 2;
  // Scheduler state
  string state = 3;
  // Scheduler room replicas.
  int32 rooms_replicas = 4;
  // Number of game rooms in Ready state.
  int32 rooms_ready = 5;
  // Number of game rooms in Occupied state.
  int32 rooms_occupied = 6;
  // Number of game rooms in Pending state.
  int32 rooms_pending = 7;
  // Number of game rooms in Terminating state.
  int32 rooms_terminating = 8;
  // Autoscaling info (min, max, enabled)
  AutoscalingInfo autoscaling = 9;
}
