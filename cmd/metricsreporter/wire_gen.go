// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package metricsreporter

import (
	"github.com/google/wire"
	"github.com/topfreegames/maestro/internal/config"
	"github.com/topfreegames/maestro/internal/core/services/workers_manager"
	"github.com/topfreegames/maestro/internal/core/workers"
	"github.com/topfreegames/maestro/internal/core/workers/metricsreporter"
	"github.com/topfreegames/maestro/internal/service"
	"time"
)

// Injectors from wire.go:

func initializeMetricsReporter(c config.Config) (*workers_manager.WorkersManager, error) {
	workerBuilder := provideMetricsReporterBuilder()
	schedulerStorage, err := service.NewSchedulerStoragePg(c)
	if err != nil {
		return nil, err
	}
	roomStorage, err := service.NewRoomStorageRedis(c)
	if err != nil {
		return nil, err
	}
	gameRoomInstanceStorage, err := service.NewGameRoomInstanceStorageRedis(c)
	if err != nil {
		return nil, err
	}
	duration := provideMetricsReporterIntervalMillis(c)
	workerOptions := &workers.WorkerOptions{
		RoomStorage:                   roomStorage,
		InstanceStorage:               gameRoomInstanceStorage,
		MetricsReporterIntervalMillis: duration,
	}
	workersManager := workers_manager.NewWorkersManager(workerBuilder, c, schedulerStorage, workerOptions)
	return workersManager, nil
}

// wire.go:

func provideMetricsReporterBuilder() workers.WorkerBuilder {
	return metricsreporter.NewMetricsReporterWorker
}

func provideMetricsReporterIntervalMillis(c config.Config) time.Duration {
	return c.GetDuration("reporter.metrics.intervalMillis")
}

var WorkerOptionsSet = wire.NewSet(service.NewRoomStorageRedis, service.NewGameRoomInstanceStorageRedis, provideMetricsReporterIntervalMillis, wire.Struct(new(workers.WorkerOptions), "RoomStorage", "InstanceStorage", "MetricsReporterIntervalMillis"))
