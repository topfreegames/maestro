// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package runtimewatcher

import (
	"github.com/google/wire"
	"github.com/topfreegames/maestro/internal/config"
	"github.com/topfreegames/maestro/internal/core/services/events_forwarder"
	"github.com/topfreegames/maestro/internal/core/services/workers_manager"
	"github.com/topfreegames/maestro/internal/core/workers"
	"github.com/topfreegames/maestro/internal/core/workers/runtime_watcher_worker"
	"github.com/topfreegames/maestro/internal/service"
)

// Injectors from wire.go:

func initializeRuntimeWatcher(c config.Config) (*workers_manager.WorkersManager, error) {
	workerBuilder := provideRuntimeWatcherBuilder()
	schedulerStorage, err := service.NewSchedulerStoragePg(c)
	if err != nil {
		return nil, err
	}
	clock := service.NewClockTime()
	portAllocator, err := service.NewPortAllocatorRandom(c)
	if err != nil {
		return nil, err
	}
	roomStorage, err := service.NewRoomStorageRedis(c)
	if err != nil {
		return nil, err
	}
	gameRoomInstanceStorage, err := service.NewGameRoomInstanceStorageRedis(c)
	if err != nil {
		return nil, err
	}
	runtime, err := service.NewRuntimeKubernetes(c)
	if err != nil {
		return nil, err
	}
	eventsForwarder, err := service.NewEventsForwarder(c)
	if err != nil {
		return nil, err
	}
	schedulerCache, err := service.NewSchedulerCacheRedis(c)
	if err != nil {
		return nil, err
	}
	eventsForwarderConfig, err := service.NewEventsForwarderServiceConfig(c)
	if err != nil {
		return nil, err
	}
	eventsService := events_forwarder.NewEventsForwarderService(eventsForwarder, schedulerStorage, gameRoomInstanceStorage, roomStorage, schedulerCache, eventsForwarderConfig)
	roomManagerConfig, err := service.NewRoomManagerConfig(c)
	if err != nil {
		return nil, err
	}
	roomManager := service.NewRoomManager(clock, portAllocator, roomStorage, gameRoomInstanceStorage, runtime, eventsService, roomManagerConfig)
	workerOptions := &workers.WorkerOptions{
		RoomManager: roomManager,
		Runtime:     runtime,
	}
	workersManager := workers_manager.NewWorkersManager(workerBuilder, c, schedulerStorage, workerOptions)
	return workersManager, nil
}

// wire.go:

func provideRuntimeWatcherBuilder() workers.WorkerBuilder {
	return runtime_watcher_worker.NewRuntimeWatcherWorker
}

var WorkerOptionsSet = wire.NewSet(service.NewRuntimeKubernetes, RoomManagerSet, wire.Struct(new(workers.WorkerOptions), "RoomManager", "Runtime"))

var RoomManagerSet = wire.NewSet(service.NewSchedulerStoragePg, service.NewClockTime, service.NewPortAllocatorRandom, service.NewRoomStorageRedis, service.NewGameRoomInstanceStorageRedis, service.NewSchedulerCacheRedis, service.NewRoomManagerConfig, service.NewRoomManager, service.NewEventsForwarder, events_forwarder.NewEventsForwarderService, service.NewEventsForwarderServiceConfig)
