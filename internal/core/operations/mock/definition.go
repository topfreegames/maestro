// Code generated by MockGen. DO NOT EDIT.
// Source: ../internal/core/operations/definition.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	operation "github.com/topfreegames/maestro/internal/core/entities/operation"
)

// Definition is a mock of Definition interface.
type Definition struct {
	ctrl     *gomock.Controller
	recorder *DefinitionMockRecorder
}

// DefinitionMockRecorder is the mock recorder for Definition.
type DefinitionMockRecorder struct {
	mock *Definition
}

// NewDefinition creates a new mock instance.
func NewDefinition(ctrl *gomock.Controller) *Definition {
	mock := &Definition{ctrl: ctrl}
	mock.recorder = &DefinitionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Definition) EXPECT() *DefinitionMockRecorder {
	return m.recorder
}

// Marshal mocks base method.
func (m *Definition) Marshal() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Marshal")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Marshal indicates an expected call of Marshal.
func (mr *DefinitionMockRecorder) Marshal() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Marshal", reflect.TypeOf((*Definition)(nil).Marshal))
}

// Name mocks base method.
func (m *Definition) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *DefinitionMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*Definition)(nil).Name))
}

// ShouldExecute mocks base method.
func (m *Definition) ShouldExecute(ctx context.Context, currentOperations []*operation.Operation) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShouldExecute", ctx, currentOperations)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ShouldExecute indicates an expected call of ShouldExecute.
func (mr *DefinitionMockRecorder) ShouldExecute(ctx, currentOperations interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShouldExecute", reflect.TypeOf((*Definition)(nil).ShouldExecute), ctx, currentOperations)
}

// Unmarshal mocks base method.
func (m *Definition) Unmarshal(raw []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unmarshal", raw)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unmarshal indicates an expected call of Unmarshal.
func (mr *DefinitionMockRecorder) Unmarshal(raw interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unmarshal", reflect.TypeOf((*Definition)(nil).Unmarshal), raw)
}
