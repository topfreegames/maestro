// Code generated by MockGen. DO NOT EDIT.
// Source: ../internal/core/operations/executor.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	operation "github.com/topfreegames/maestro/internal/core/entities/operation"
	operations "github.com/topfreegames/maestro/internal/core/operations"
)

// Executor is a mock of Executor interface.
type Executor struct {
	ctrl     *gomock.Controller
	recorder *ExecutorMockRecorder
}

// ExecutorMockRecorder is the mock recorder for Executor.
type ExecutorMockRecorder struct {
	mock *Executor
}

// NewExecutor creates a new mock instance.
func NewExecutor(ctrl *gomock.Controller) *Executor {
	mock := &Executor{ctrl: ctrl}
	mock.recorder = &ExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Executor) EXPECT() *ExecutorMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *Executor) Execute(ctx context.Context, op *operation.Operation, definition operations.Definition) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, op, definition)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *ExecutorMockRecorder) Execute(ctx, op, definition interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*Executor)(nil).Execute), ctx, op, definition)
}

// Name mocks base method.
func (m *Executor) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *ExecutorMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*Executor)(nil).Name))
}

// Rollback mocks base method.
func (m *Executor) Rollback(ctx context.Context, op *operation.Operation, definition operations.Definition, executeErr error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback", ctx, op, definition, executeErr)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *ExecutorMockRecorder) Rollback(ctx, op, definition, executeErr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*Executor)(nil).Rollback), ctx, op, definition, executeErr)
}
