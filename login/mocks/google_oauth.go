// Automatically generated by MockGen. DO NOT EDIT!
// Source: login/interfaces/google_oauth.go

package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	interfaces "github.com/topfreegames/maestro/login/interfaces"
	oauth2 "golang.org/x/oauth2"
)

// Mock of GoogleOauthConfig interface
type MockGoogleOauthConfig struct {
	ctrl     *gomock.Controller
	recorder *_MockGoogleOauthConfigRecorder
}

// Recorder for MockGoogleOauthConfig (not exported)
type _MockGoogleOauthConfigRecorder struct {
	mock *MockGoogleOauthConfig
}

func NewMockGoogleOauthConfig(ctrl *gomock.Controller) *MockGoogleOauthConfig {
	mock := &MockGoogleOauthConfig{ctrl: ctrl}
	mock.recorder = &_MockGoogleOauthConfigRecorder{mock}
	return mock
}

func (_m *MockGoogleOauthConfig) EXPECT() *_MockGoogleOauthConfigRecorder {
	return _m.recorder
}

func (_m *MockGoogleOauthConfig) SetClientID(clientID string) {
	_m.ctrl.Call(_m, "SetClientID", clientID)
}

func (_mr *_MockGoogleOauthConfigRecorder) SetClientID(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetClientID", arg0)
}

func (_m *MockGoogleOauthConfig) SetClientSecret(clientSecret string) {
	_m.ctrl.Call(_m, "SetClientSecret", clientSecret)
}

func (_mr *_MockGoogleOauthConfigRecorder) SetClientSecret(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetClientSecret", arg0)
}

func (_m *MockGoogleOauthConfig) AuthCodeURL(state string, opts ...oauth2.AuthCodeOption) string {
	_s := []interface{}{state}
	for _, _x := range opts {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "AuthCodeURL", _s...)
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockGoogleOauthConfigRecorder) AuthCodeURL(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AuthCodeURL", _s...)
}

func (_m *MockGoogleOauthConfig) Exchange(ctx context.Context, code, redirectURI string) (*oauth2.Token, error) {
	ret := _m.ctrl.Call(_m, "Exchange", ctx, code, redirectURI)
	ret0, _ := ret[0].(*oauth2.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockGoogleOauthConfigRecorder) Exchange(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Exchange", arg0, arg1, arg2)
}

func (_m *MockGoogleOauthConfig) TokenSource(ctx context.Context, t *oauth2.Token) oauth2.TokenSource {
	ret := _m.ctrl.Call(_m, "TokenSource", ctx, t)
	ret0, _ := ret[0].(oauth2.TokenSource)
	return ret0
}

func (_mr *_MockGoogleOauthConfigRecorder) TokenSource(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TokenSource", arg0, arg1)
}

func (_m *MockGoogleOauthConfig) Client(ctx context.Context, t *oauth2.Token) interfaces.Client {
	ret := _m.ctrl.Call(_m, "Client", ctx, t)
	ret0, _ := ret[0].(interfaces.Client)
	return ret0
}

func (_mr *_MockGoogleOauthConfigRecorder) Client(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Client", arg0, arg1)
}
