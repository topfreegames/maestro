// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.17.3
// source: api/v1/schedulers.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SchedulersService_ListSchedulers_FullMethodName       = "/api.v1.SchedulersService/ListSchedulers"
	SchedulersService_GetScheduler_FullMethodName         = "/api.v1.SchedulersService/GetScheduler"
	SchedulersService_CreateScheduler_FullMethodName      = "/api.v1.SchedulersService/CreateScheduler"
	SchedulersService_NewSchedulerVersion_FullMethodName  = "/api.v1.SchedulersService/NewSchedulerVersion"
	SchedulersService_PatchScheduler_FullMethodName       = "/api.v1.SchedulersService/PatchScheduler"
	SchedulersService_GetSchedulerVersions_FullMethodName = "/api.v1.SchedulersService/GetSchedulerVersions"
	SchedulersService_SwitchActiveVersion_FullMethodName  = "/api.v1.SchedulersService/SwitchActiveVersion"
	SchedulersService_GetSchedulersInfo_FullMethodName    = "/api.v1.SchedulersService/GetSchedulersInfo"
	SchedulersService_DeleteScheduler_FullMethodName      = "/api.v1.SchedulersService/DeleteScheduler"
)

// SchedulersServiceClient is the client API for SchedulersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SchedulersServiceClient interface {
	// Lists all schedulers.
	ListSchedulers(ctx context.Context, in *ListSchedulersRequest, opts ...grpc.CallOption) (*ListSchedulersResponse, error)
	// Get Specific Scheduler by name
	GetScheduler(ctx context.Context, in *GetSchedulerRequest, opts ...grpc.CallOption) (*GetSchedulerResponse, error)
	// Create a scheduler.
	CreateScheduler(ctx context.Context, in *CreateSchedulerRequest, opts ...grpc.CallOption) (*CreateSchedulerResponse, error)
	// Creates new scheduler version and switch it to active version.
	NewSchedulerVersion(ctx context.Context, in *NewSchedulerVersionRequest, opts ...grpc.CallOption) (*NewSchedulerVersionResponse, error)
	// Patch a scheduler and switch it to active version.
	PatchScheduler(ctx context.Context, in *PatchSchedulerRequest, opts ...grpc.CallOption) (*PatchSchedulerResponse, error)
	// Given a Scheduler, returns it's versions
	GetSchedulerVersions(ctx context.Context, in *GetSchedulerVersionsRequest, opts ...grpc.CallOption) (*GetSchedulerVersionsResponse, error)
	// Switch Active Version to Scheduler
	SwitchActiveVersion(ctx context.Context, in *SwitchActiveVersionRequest, opts ...grpc.CallOption) (*SwitchActiveVersionResponse, error)
	// List Scheduler and Game Rooms info by Game
	GetSchedulersInfo(ctx context.Context, in *GetSchedulersInfoRequest, opts ...grpc.CallOption) (*GetSchedulersInfoResponse, error)
	// List Scheduler and Game Rooms info by Game
	DeleteScheduler(ctx context.Context, in *DeleteSchedulerRequest, opts ...grpc.CallOption) (*DeleteSchedulerResponse, error)
}

type schedulersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSchedulersServiceClient(cc grpc.ClientConnInterface) SchedulersServiceClient {
	return &schedulersServiceClient{cc}
}

func (c *schedulersServiceClient) ListSchedulers(ctx context.Context, in *ListSchedulersRequest, opts ...grpc.CallOption) (*ListSchedulersResponse, error) {
	out := new(ListSchedulersResponse)
	err := c.cc.Invoke(ctx, SchedulersService_ListSchedulers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulersServiceClient) GetScheduler(ctx context.Context, in *GetSchedulerRequest, opts ...grpc.CallOption) (*GetSchedulerResponse, error) {
	out := new(GetSchedulerResponse)
	err := c.cc.Invoke(ctx, SchedulersService_GetScheduler_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulersServiceClient) CreateScheduler(ctx context.Context, in *CreateSchedulerRequest, opts ...grpc.CallOption) (*CreateSchedulerResponse, error) {
	out := new(CreateSchedulerResponse)
	err := c.cc.Invoke(ctx, SchedulersService_CreateScheduler_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulersServiceClient) NewSchedulerVersion(ctx context.Context, in *NewSchedulerVersionRequest, opts ...grpc.CallOption) (*NewSchedulerVersionResponse, error) {
	out := new(NewSchedulerVersionResponse)
	err := c.cc.Invoke(ctx, SchedulersService_NewSchedulerVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulersServiceClient) PatchScheduler(ctx context.Context, in *PatchSchedulerRequest, opts ...grpc.CallOption) (*PatchSchedulerResponse, error) {
	out := new(PatchSchedulerResponse)
	err := c.cc.Invoke(ctx, SchedulersService_PatchScheduler_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulersServiceClient) GetSchedulerVersions(ctx context.Context, in *GetSchedulerVersionsRequest, opts ...grpc.CallOption) (*GetSchedulerVersionsResponse, error) {
	out := new(GetSchedulerVersionsResponse)
	err := c.cc.Invoke(ctx, SchedulersService_GetSchedulerVersions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulersServiceClient) SwitchActiveVersion(ctx context.Context, in *SwitchActiveVersionRequest, opts ...grpc.CallOption) (*SwitchActiveVersionResponse, error) {
	out := new(SwitchActiveVersionResponse)
	err := c.cc.Invoke(ctx, SchedulersService_SwitchActiveVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulersServiceClient) GetSchedulersInfo(ctx context.Context, in *GetSchedulersInfoRequest, opts ...grpc.CallOption) (*GetSchedulersInfoResponse, error) {
	out := new(GetSchedulersInfoResponse)
	err := c.cc.Invoke(ctx, SchedulersService_GetSchedulersInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulersServiceClient) DeleteScheduler(ctx context.Context, in *DeleteSchedulerRequest, opts ...grpc.CallOption) (*DeleteSchedulerResponse, error) {
	out := new(DeleteSchedulerResponse)
	err := c.cc.Invoke(ctx, SchedulersService_DeleteScheduler_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchedulersServiceServer is the server API for SchedulersService service.
// All implementations must embed UnimplementedSchedulersServiceServer
// for forward compatibility
type SchedulersServiceServer interface {
	// Lists all schedulers.
	ListSchedulers(context.Context, *ListSchedulersRequest) (*ListSchedulersResponse, error)
	// Get Specific Scheduler by name
	GetScheduler(context.Context, *GetSchedulerRequest) (*GetSchedulerResponse, error)
	// Create a scheduler.
	CreateScheduler(context.Context, *CreateSchedulerRequest) (*CreateSchedulerResponse, error)
	// Creates new scheduler version and switch it to active version.
	NewSchedulerVersion(context.Context, *NewSchedulerVersionRequest) (*NewSchedulerVersionResponse, error)
	// Patch a scheduler and switch it to active version.
	PatchScheduler(context.Context, *PatchSchedulerRequest) (*PatchSchedulerResponse, error)
	// Given a Scheduler, returns it's versions
	GetSchedulerVersions(context.Context, *GetSchedulerVersionsRequest) (*GetSchedulerVersionsResponse, error)
	// Switch Active Version to Scheduler
	SwitchActiveVersion(context.Context, *SwitchActiveVersionRequest) (*SwitchActiveVersionResponse, error)
	// List Scheduler and Game Rooms info by Game
	GetSchedulersInfo(context.Context, *GetSchedulersInfoRequest) (*GetSchedulersInfoResponse, error)
	// List Scheduler and Game Rooms info by Game
	DeleteScheduler(context.Context, *DeleteSchedulerRequest) (*DeleteSchedulerResponse, error)
	mustEmbedUnimplementedSchedulersServiceServer()
}

// UnimplementedSchedulersServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSchedulersServiceServer struct {
}

func (UnimplementedSchedulersServiceServer) ListSchedulers(context.Context, *ListSchedulersRequest) (*ListSchedulersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSchedulers not implemented")
}
func (UnimplementedSchedulersServiceServer) GetScheduler(context.Context, *GetSchedulerRequest) (*GetSchedulerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScheduler not implemented")
}
func (UnimplementedSchedulersServiceServer) CreateScheduler(context.Context, *CreateSchedulerRequest) (*CreateSchedulerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateScheduler not implemented")
}
func (UnimplementedSchedulersServiceServer) NewSchedulerVersion(context.Context, *NewSchedulerVersionRequest) (*NewSchedulerVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewSchedulerVersion not implemented")
}
func (UnimplementedSchedulersServiceServer) PatchScheduler(context.Context, *PatchSchedulerRequest) (*PatchSchedulerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchScheduler not implemented")
}
func (UnimplementedSchedulersServiceServer) GetSchedulerVersions(context.Context, *GetSchedulerVersionsRequest) (*GetSchedulerVersionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchedulerVersions not implemented")
}
func (UnimplementedSchedulersServiceServer) SwitchActiveVersion(context.Context, *SwitchActiveVersionRequest) (*SwitchActiveVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwitchActiveVersion not implemented")
}
func (UnimplementedSchedulersServiceServer) GetSchedulersInfo(context.Context, *GetSchedulersInfoRequest) (*GetSchedulersInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchedulersInfo not implemented")
}
func (UnimplementedSchedulersServiceServer) DeleteScheduler(context.Context, *DeleteSchedulerRequest) (*DeleteSchedulerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteScheduler not implemented")
}
func (UnimplementedSchedulersServiceServer) mustEmbedUnimplementedSchedulersServiceServer() {}

// UnsafeSchedulersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SchedulersServiceServer will
// result in compilation errors.
type UnsafeSchedulersServiceServer interface {
	mustEmbedUnimplementedSchedulersServiceServer()
}

func RegisterSchedulersServiceServer(s grpc.ServiceRegistrar, srv SchedulersServiceServer) {
	s.RegisterService(&SchedulersService_ServiceDesc, srv)
}

func _SchedulersService_ListSchedulers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSchedulersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulersServiceServer).ListSchedulers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchedulersService_ListSchedulers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulersServiceServer).ListSchedulers(ctx, req.(*ListSchedulersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulersService_GetScheduler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSchedulerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulersServiceServer).GetScheduler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchedulersService_GetScheduler_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulersServiceServer).GetScheduler(ctx, req.(*GetSchedulerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulersService_CreateScheduler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSchedulerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulersServiceServer).CreateScheduler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchedulersService_CreateScheduler_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulersServiceServer).CreateScheduler(ctx, req.(*CreateSchedulerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulersService_NewSchedulerVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewSchedulerVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulersServiceServer).NewSchedulerVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchedulersService_NewSchedulerVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulersServiceServer).NewSchedulerVersion(ctx, req.(*NewSchedulerVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulersService_PatchScheduler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchSchedulerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulersServiceServer).PatchScheduler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchedulersService_PatchScheduler_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulersServiceServer).PatchScheduler(ctx, req.(*PatchSchedulerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulersService_GetSchedulerVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSchedulerVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulersServiceServer).GetSchedulerVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchedulersService_GetSchedulerVersions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulersServiceServer).GetSchedulerVersions(ctx, req.(*GetSchedulerVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulersService_SwitchActiveVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwitchActiveVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulersServiceServer).SwitchActiveVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchedulersService_SwitchActiveVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulersServiceServer).SwitchActiveVersion(ctx, req.(*SwitchActiveVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulersService_GetSchedulersInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSchedulersInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulersServiceServer).GetSchedulersInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchedulersService_GetSchedulersInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulersServiceServer).GetSchedulersInfo(ctx, req.(*GetSchedulersInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulersService_DeleteScheduler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSchedulerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulersServiceServer).DeleteScheduler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchedulersService_DeleteScheduler_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulersServiceServer).DeleteScheduler(ctx, req.(*DeleteSchedulerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SchedulersService_ServiceDesc is the grpc.ServiceDesc for SchedulersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SchedulersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.SchedulersService",
	HandlerType: (*SchedulersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListSchedulers",
			Handler:    _SchedulersService_ListSchedulers_Handler,
		},
		{
			MethodName: "GetScheduler",
			Handler:    _SchedulersService_GetScheduler_Handler,
		},
		{
			MethodName: "CreateScheduler",
			Handler:    _SchedulersService_CreateScheduler_Handler,
		},
		{
			MethodName: "NewSchedulerVersion",
			Handler:    _SchedulersService_NewSchedulerVersion_Handler,
		},
		{
			MethodName: "PatchScheduler",
			Handler:    _SchedulersService_PatchScheduler_Handler,
		},
		{
			MethodName: "GetSchedulerVersions",
			Handler:    _SchedulersService_GetSchedulerVersions_Handler,
		},
		{
			MethodName: "SwitchActiveVersion",
			Handler:    _SchedulersService_SwitchActiveVersion_Handler,
		},
		{
			MethodName: "GetSchedulersInfo",
			Handler:    _SchedulersService_GetSchedulersInfo_Handler,
		},
		{
			MethodName: "DeleteScheduler",
			Handler:    _SchedulersService_DeleteScheduler_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/schedulers.proto",
}
